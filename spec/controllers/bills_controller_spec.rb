  require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BillsController do

  # This should return the minimal set of attributes required to create a valid
  # Bill. As you add validations to Bill, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {  }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # BillsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "#index redirects to search" do
      get :index, {:locale => 'es'}, valid_session
      response.should redirect_to :action => :searches
    end
  end
  describe "#get_author_related_info" do
    before :each do
      
    end
    it('gets the information based on the name of an author') do
      response = '[{
      "uid":"5330377bd0c05d8b737b6de0",
      "name":"Roberto Poblete Zapata"}]'
      stub_request(:get, /.*morph.io*/)
        .to_return(:body => response)
      controller = BillsController.new
      extra_info = controller.instance_eval{ get_author_related_info "Jaramillo Becker, Enrique" }
      extra_info['uid'].should eql "5330377bd0c05d8b737b6de0"
      extra_info['name'].should eql "Enrique Jaramillo Becker"
    end
    it('if morph doesnt have the person') do
      response = '[]'
      stub_request(:get, /.*morph.io*/)
        .to_return(:body => response)
      controller = BillsController.new
      extra_info = controller.instance_eval{ get_author_related_info "Jaramillo Becker, Enrique" }
      extra_info['uid'].should be_nil
      extra_info['name'].should eql "Enrique Jaramillo Becker"
    end
    it('if morph returns more than one person') do
      response = '[{
      "uid":"5330377bd0c05d8b737b6de0",
      "name":"Roberto Poblete Zapata"},{
      "uid":"a",
      "name":"hello"}]'
      stub_request(:get, /.*morph.io*/)
        .to_return(:body => response)
      controller = BillsController.new
      extra_info = controller.instance_eval{ get_author_related_info "Jaramillo Becker, Enrique" }
      extra_info['uid'].should eql "5330377bd0c05d8b737b6de0"
      extra_info['name'].should eql "Enrique Jaramillo Becker"
    end
  end

  describe "GET show" do
    before :each do
      response = '[{
      "uid":"5330377bd0c05d8b737b6de0",
      "name":"Roberto Poblete Zapata"}]'
      stub_request(:get, /.*morph.io*/)
        .to_return(:body => response)
    end
    it "assigns the requested bill as @bill" do
      bill = Billit::Bill.get(ENV['billit_url'] + "6967-06.json", 'application/json')
      get :show, {:id => bill.uid, :locale => 'es'}
      assigns(:paperworks).should_not be_nil
      assigns(:bill).should_not be_nil
      assigns(:bill).uid.should eq(bill.uid)
      assigns(:bill).should be_an_instance_of Billit::Bill
      assigns(:title).should eq bill.title + ' - '
      #Muestra la zona morada
      assigns(:condition_bill_header).should be true
      assigns(:authors).should_not be_nil
      assigns(:authors).length.should eql 10
      assigns(:authors)[0].should be_an_instance_of Hash
      assigns(:authors)[0].should have_key('uid')
      assigns(:authors)[0].should have_key('name')

    end


    it "returns @date_freq as an array of integers" do
      bill = Billit::Bill.get(ENV['billit_url'] + "6967-06.json", 'application/json')
      # bill = Bill.create! valid_attributes
      get :show, {:id => bill.uid, :locale => 'es'}, valid_session
      assigns(:date_freq).should be_an_instance_of Array
      assigns(:date_freq).length.should be ENV['bill_graph_data_length'].to_i
    end

    it "assigns @date_freq values according to defined time intervals" do
      response = '{
                  "uid": "6967-06",
                  "short_uid": "6967",
                  "title": "Declara feriado el día 7 de junio para la Región de Arica y Parinacota. ",
                  "creation_date": "2010-06-02T00:00:00Z",
                  "stage": "Tramitación terminada",
                  "sub_stage": " / ",
                  "authors": [
                  "Ascencio Mansilla, Gabriel",
                  "Auth Stewart, Pepe",
                  "Baltolu Rasera, Nino",
                  "Campos Jara, Cristián",
                  "Jaramillo Becker, Enrique",
                  "Lorenzini Basso, Pablo",
                  "Núñez Lozano, Marco Antonio",
                  "Pérez Arriagada, José",
                  "Tuma Zedan, Joaquín",
                  "Vargas Pizarro, Orlando"
                  ],
                  "publish_date": "2013-04-30T00:00:00Z",
                  "tags": [
                  "arica",
                  "feriado",
                  "feriados regionales"
                  ],
                  "paperworks": [
                  {
                    "created_at": "2014-04-10T20:03:07Z",
                    "date": "2012-04-12T00:00:00+00:00",
                    "updated_at": "2014-04-10T20:07:18Z",
                    "bill_uid": "6967-06",
                    "timeline_status": "Estado por Defecto",
                    "_links": {
                    "self": {
                    "href": "http://127.0.0.1.xip.io:3003/paperworks/5346f670683ff8a1dd000001"
                    },
                    "bill": {
                    "href": "http://127.0.0.1.xip.io:3003/bills/6967-06"
                    }
                    }
                    },
                    {
                    "created_at": "2014-04-10T20:12:26Z",
                    "date": "2013-03-12T00:00:00+00:00",
                    "updated_at": "2014-04-10T20:22:32Z",
                    "bill_uid": "6967-06",
                    "timeline_status": "Estado por Defecto",
                    "_links": {
                    "self": {
                    "href": "http://127.0.0.1.xip.io:3003/paperworks/5346fb0f683ff8a1dd000003"
                    },
                    "bill": {
                    "href": "http://127.0.0.1.xip.io:3003/bills/6967-06"
                    }
                    }
                    },
                    {
                    "created_at": "2014-04-10T20:24:21Z",
                    "date": "2013-03-13T00:00:00+00:00",
                    "updated_at": "2014-04-10T20:24:45Z",
                    "bill_uid": "6967-06",
                    "timeline_status": "Estado por Defecto",
                    "_links": {
                    "self": {
                    "href": "http://127.0.0.1.xip.io:3003/paperworks/5346fddf683ff8a1dd000004"
                    },
                    "bill": {
                    "href": "http://127.0.0.1.xip.io:3003/bills/6967-06"
                    }
                    }
                    },
                    {
                    "created_at": "2014-04-10T20:26:59Z",
                    "date": "2013-03-14T00:00:00+00:00",
                    "updated_at": "2014-04-10T20:26:59Z",
                    "bill_uid": "6967-06",
                    "timeline_status": "Estado por Defecto",
                    "_links": {
                    "self": {
                    "href": "http://127.0.0.1.xip.io:3003/paperworks/5346fe65683ff8a1dd000005"
                    },
                    "bill": {
                    "href": "http://127.0.0.1.xip.io:3003/bills/6967-06"
                    }
                    }
                    },
                    {
                    "created_at": "2014-04-10T20:28:46Z",
                    "date": "2013-03-15T00:00:00+00:00",
                    "updated_at": "2014-04-10T20:28:46Z",
                    "bill_uid": "6967-06",
                    "timeline_status": "Estado por Defecto",
                    "_links": {
                    "self": {
                    "href": "http://127.0.0.1.xip.io:3003/paperworks/5346fee1683ff8a1dd000007"
                    },
                    "bill": {
                    "href": "http://127.0.0.1.xip.io:3003/bills/6967-06"
                    }
                    }
                    },
                    {
                    "created_at": "2014-04-10T20:29:48Z",
                    "date": "2013-01-13T00:00:00+00:00",
                    "updated_at": "2014-04-10T20:30:48Z",
                    "bill_uid": "6967-06",
                    "timeline_status": "Estado por Defecto",
                    "_links": {
                    "self": {
                    "href": "http://127.0.0.1.xip.io:3003/paperworks/5346ff11683ff8a1dd000008"
                    },
                    "bill": {
                    "href": "http://127.0.0.1.xip.io:3003/bills/6967-06"
                    }
                    }
                    }
                  ],
                  "priorities": [ ],
                  "reports": [ ],
                  "documents": [ ],
                  "directives": [ ],
                  "remarks": [ ],
                  "revisions": [ ],
                  "_links": {
                  "self": {
                  "href": "http://127.0.0.1.xip.io:3003/bills/6967-06"
                  }
                  }
                  }'
      stub_request(:get, ENV['billit_url'] + "6967-06.json")
        .to_return(:body => response)

      #bill = Billit::Bill.get(ENV['billit_url'] + "6967-06", 'application/json')
      Date.stub(:today) {Date.new(2013, 4)}
      response = get :show, {:id => "6967-06", :locale => 'es'}, valid_session
      assigns(:date_freq).should eq [1,0,0,0,0,0,0,0,0,4,0,0]
    end
  end

  describe "GET new" do
    xit "assigns a new bill as @bill" do
      get :new, {}, valid_session
      assigns(:bill).should be_a_new(Billit::Bill)
    end
  end

  describe "GET edit" do
    xit "assigns the requested bill as @bill" do
      bill = Billit::Bill.create! valid_attributes
      get :edit, {:id => bill.to_param}, valid_session
      assigns(:bill).should eq(bill)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      xit "creates a new Bill" do
        expect {
          post :create, {:bill => valid_attributes}, valid_session
        }.to change(Billit::Bill, :count).by(1)
      end

      xit "assigns a newly created bill as @bill" do
        post :create, {:bill => valid_attributes}, valid_session
        assigns(:bill).should be_a(Billit::Bill)
        assigns(:bill).should be_persisted
      end

      xit "redirects to the created bill" do
        post :create, {:bill => valid_attributes}, valid_session
        response.should redirect_to(Billit::Bill.last)
      end
    end

    describe "with invalid params" do
      xit "assigns a newly created but unsaved bill as @bill" do
        # Trigger the behavior that occurs when invalid params are submitted
        Billit::Bill.any_instance.stub(:save).and_return(false)
        post :create, {:bill => {  }}, valid_session
        assigns(:bill).should be_a_new(Billit::Bill)
      end

      xit "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Billit::Bill.any_instance.stub(:save).and_return(false)
        post :create, {:bill => {  }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      xit "updates the requested bill" do
        bill = Billit::Bill.get("http://billit.ciudadanointeligente.org/bills/6967-06", 'application/json')
        put :update, {id: bill.uid, tags: bill.tags, locale: 'es'}, valid_session
        assigns(:bill).tags.should eq(bill.tags)
      end

      xit "assigns the requested bill as @bill" do
        bill = Billit::Bill.create! valid_attributes
        put :update, {:id => bill.to_param, :bill => valid_attributes}, valid_session
        assigns(:bill).should eq(bill)
      end

      xit "redirects to the bill" do
        bill = Billit::Bill.create! valid_attributes
        put :update, {:id => bill.to_param, :bill => valid_attributes}, valid_session
        response.should redirect_to(bill)
      end
    end

    describe "with invalid params" do
      xit "assigns the bill as @bill" do
        bill = Billit::Bill.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Billit::Bill.any_instance.stub(:save).and_return(false)
        put :update, {:id => bill.to_param, :bill => {  }}, valid_session
        assigns(:bill).should eq(bill)
      end

      xit "re-renders the 'edit' template" do
        bill = Billit::Bill.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Billit::Bill.any_instance.stub(:save).and_return(false)
        put :update, {:id => bill.to_param, :bill => {  }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    xit "destroys the requested bill" do
      bill = Billit::Bill.create! valid_attributes
      expect {
        delete :destroy, {:id => bill.to_param}, valid_session
      }.to change(Billit::Bill, :count).by(-1)
    end

    xit "redirects to the bills list" do
      bill = Billit::Bill.create! valid_attributes
      delete :destroy, {:id => bill.to_param}, valid_session
      response.should redirect_to(bills_url)
    end
  end

end
